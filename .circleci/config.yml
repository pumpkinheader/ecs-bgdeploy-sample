version: 2.1
executors:
  node:
    docker:
      - image: circleci/node:12

orbs:
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-ecs: circleci/aws-ecs@2.2.1
  aws-cli: circleci/aws-cli@2.0.2

jobs:
  build-and-test:
    executor: node
    steps:
      - checkout
      - run: echo 'Cacheの復元'
      - run: echo 'npm install'
      - run: echo 'Cacheの保存'
      - run: echo 'ダミーテスト実行'
      - run: echo 'テスト結果の保存'
  sample-aws-job:
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - aws-cli/setup
      - run:
          command: |
            testListener="arn:aws:elasticloadbalancing:ap-northeast-1:619278543031:listener/app/DevSandBoxManualBG/3b3dea0f8f9f1050/6f7886056a6980d9"
            mainListener=arn:aws:elasticloadbalancing:ap-northeast-1:619278543031:listener/app/DevSandBoxManualBG/3b3dea0f8f9f1050/8ae7ab65123c72c4
            testListenertargetArn=$(aws elbv2 describe-listeners --listener-arn ${testListener} --query "Listeners[].DefaultActions[].TargetGroupArn" --output text)
            mainListenertargetArn=$(aws elbv2 describe-listeners --listener-arn ${mainListener} --query "Listeners[].DefaultActions[].TargetGroupArn" --output text)
            currentServiceInfo=$(aws ecs describe-services --cluster DevSandboxSampleCluster --services DevSandBoxSampleService8080 DevSandBoxSampleService8080-2 --query "services[?(length(deployments)==\`1\` && runningCount==desiredCount && desiredCount!=\`0\` && length(loadBalancers[?targetGroupArn==\`${mainListenertargetArn}\`])==\`1\`)].[serviceName,desiredCount]" --output text)
            currentService=$(echo ${currentServiceInfo} | cut -d ' ' -f1)
            desiredCapacity=$(echo ${currentServiceInfo} | cut -d ' ' -f2)
            nextService=$(aws ecs describe-services --cluster DevSandboxSampleCluster --services DevSandBoxSampleService8080 DevSandBoxSampleService8080-2 --query "services[?(length(deployments)==\`1\` && runningCount==desiredCount && desiredCount==\`0\` && length(loadBalancers[?targetGroupArn==\`${testListenertargetArn}\`])==\`1\`)].serviceName" --output text)
            echo "export MAIN_LISTENER_ARN='${mainListener}'" >> $BASH_ENV
            echo "export TEST_LISTENER_ARN='${testListener}'" >> $BASH_ENV
            echo "export MAIN_LISTENER_TARGET_ARN='${mainListenertargetArn}'" >> $BASH_ENV
            echo "export TEST_LISTENER_TARGET_ARN='${testListenertargetArn}'" >> $BASH_ENV
            echo "export CURRENT_SERVICE_NAME='${currentService}'" >> $BASH_ENV
            echo "export NEXT_SERVICE_NAME='${nextService}'" >> $BASH_ENV
            echo "export DESIRED_CAPACITY='${desiredCapacity}'" >> $BASH_ENV
            echo ${BASH_ENV}
      - run:
          command: |
            echo "over run step env -> "${MAIN_LISTENER_ARN}
            echo "over run step env -> "${TEST_LISTENER_ARN}
            echo "over run step env -> "${MAIN_LISTENER_TARGET_ARN}
            echo "over run step env -> "${TEST_LISTENER_TARGET_ARN}
            echo "over run step env -> "${CURRENT_SERVICE_NAME}
            echo "over run step env -> "${NEXT_SERVICE_NAME}
            echo "over run step env -> "${DESIRED_CAPACITY}
            echo "over run step env -> "${BASH_ENV}

  bgdeploy:
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - aws-cli/setup
      - run:
          command: |
            testListener="arn:aws:elasticloadbalancing:ap-northeast-1:619278543031:listener/app/DevSandBoxManualBG/3b3dea0f8f9f1050/6f7886056a6980d9"
            mainListener=arn:aws:elasticloadbalancing:ap-northeast-1:619278543031:listener/app/DevSandBoxManualBG/3b3dea0f8f9f1050/8ae7ab65123c72c4
            testListenertargetArn=$(aws elbv2 describe-listeners --listener-arn ${testListener} --query "Listeners[].DefaultActions[].TargetGroupArn" --output text)
            mainListenertargetArn=$(aws elbv2 describe-listeners --listener-arn ${mainListener} --query "Listeners[].DefaultActions[].TargetGroupArn" --output text)
            currentServiceInfo=$(aws ecs describe-services --cluster DevSandboxSampleCluster --services DevSandBoxSampleService8080 DevSandBoxSampleService8080-2 --query "services[?(length(deployments)==\`1\` && runningCount==desiredCount && desiredCount!=\`0\` && length(loadBalancers[?targetGroupArn==\`${mainListenertargetArn}\`])==\`1\`)].[serviceName,desiredCount]" --output text)
            currentService=$(echo ${currentServiceInfo} | cut -d ' ' -f1)
            desiredCapacity=$(echo ${currentServiceInfo} | cut -d ' ' -f2)
            nextTargetService=$(aws ecs describe-services --cluster DevSandboxSampleCluster --services DevSandBoxSampleService8080 DevSandBoxSampleService8080-2 --query "services[?(length(deployments)==\`1\` && runningCount==desiredCount && desiredCount==\`0\` && length(loadBalancers[?targetGroupArn==\`${testListenertargetArn}\`])==\`1\`)].serviceName" --output text)
            echo "export MAIN_LISTENER_ARN='${mainListener}'" >> "$BASH_ENV"
            echo "export TEST_LISTENER_ARN='${testListener}'" >> "$BASH_ENV"
            echo "export MAIN_LISTENER_TARGET_ARN='${mainListenertargetArn}'" >> "$BASH_ENV"
            echo "export TEST_LISTENER_TARGET_ARN='${testListenertargetArn}'" >> "$BASH_ENV"
            echo "export CURRENT_SERVICE_NAME='${nextTargetService}'" >> "$BASH_ENV"
            echo "export NEXT_SERVICE_NAME='${nextTargetService}'" >> "$BASH_ENV"
            echo "export DESIRED_CAPACITY='${desiredCapacity}'" >> "$BASH_ENV"
      - run:
          command: aws ecs update-service --cluster DevSandboxSampleCluster --service ${CURRENT_SERVICE_NAME} --desired-count ${DESIRED_CAPACITY}
      - aws-ecs/update-service:
          service-name: ${NEXT_SERVICE_NAME}
          cluster-name: "DevSandboxSampleCluster"
          family: "deploy-nginx"
          container-image-name-updates: "container=ecs-deploy-test-nginx,tag=${CIRCLE_SHA1}"
          verify-revision-is-deployed: true
      - run:
          command: |
            aws elbv2 modify-listener --listener-arn ${MAIN_LISTENER_ARN} --default-actions Type=forward,TargetGroupArn=${TEST_LISTENER_TARGET_ARN}
            aws elbv2 modify-listener --listener-arn ${TEST_LISTENER_ARN} --default-actions Type=forward,TargetGroupArn=${MAIN_LISTENER_TARGET_ARN}
      - run:
          command: |
            aws ecs update-service --cluster DevSandboxSampleCluster --service ${CURRENT_SERVICE_NAME} --desired-count 0
            aws ecs wait services-stable --cluster DevSandboxSampleCluster --services ${CURRENT_SERVICE_NAME}

workflows:
  build-and-deploy:
    jobs:
      - build-and-test
      - sample-aws-job:
          context:
            - dev-sandbox
      # - aws-ecr/build-and-push-image:
      #     context:
      #       - dev-sandbox
      #     requires:
      #       - build-and-test
      #     repo: "dev-sandbox-ecstest-repo"
      #     tag: "${CIRCLE_SHA1}"
      #     filters:
      #       branches:
      #         only:
      #           - circleci-plan4
      # - bgdeploy:
      #     context:
      #       - dev-sandbox
      #     requires:
      #       - aws-ecr/build-and-push-image
      #     filters:
      #       branches:
      #         only:
      #           - circleci-plan4
      # - aws-ecs/deploy-service-update:
      #     context:
      #       - dev-sandbox
      #     requires:
      #       - aws-ecr/build-and-push-image
      #     family: "codedeploy-sample-nginx"
      #     # service-name: "codedeploy-sample-service"
      #     cluster-name: "DevSandboxSampleCluster"
      #     deployment-controller: CODE_DEPLOY
      #     codedeploy-application-name: "AppECS-DevSandboxSampleCluster-codedeploy-sample-service"
      #     codedeploy-deployment-group-name: "DgpECS-DevSandboxSampleCluster-codedeploy-sample-service"
      #     codedeploy-load-balanced-container-name: "codedeploy-sample-nginx"
      #     codedeploy-load-balanced-container-port: 80
      #     verify-revision-is-deployed: true
      #     container-image-name-updates: "container=codedeploy-sample-nginx,tag=${CIRCLE_SHA1}"
      #     filters:
      #       branches:
      #         only:
      #           - main
      #####
      # PLAN4の検証
      # 1. aws-ecsのupdate-service前後にpre-stepsを挟む方式
      #     - aws-cliがorbの実行時に入るので、別途入れる必要がある。が、orbsをpre-stepsに適用できそうにないため却下
      # 2. すべて aws-cliで書くのが結果早そうである
      #
      ####
      # - aws-ecs/deploy-service-update:
      #     context:
      #       - dev-sandbox
      #     requires:
      #       - aws-ecr/build-and-push-image
      #     pre-steps:
      #       - aws-cli/install:
      #       - aws-cli/setup:
      #       - run:
      #           command: |
      #             testListener="arn:aws:elasticloadbalancing:ap-northeast-1:619278543031:listener/app/DevSandBoxManualBG/3b3dea0f8f9f1050/6f7886056a6980d9"
      #             mainListener=arn:aws:elasticloadbalancing:ap-northeast-1:619278543031:listener/app/DevSandBoxManualBG/3b3dea0f8f9f1050/8ae7ab65123c72c4
      #             testListenertargetArn=$(aws elbv2 describe-listeners --listener-arn ${testListener} --query "Listeners[].DefaultActions[].TargetGroupArn" --output text)
      #             mainListenertargetArn=$(aws elbv2 describe-listeners --listener-arn ${mainListener} --query "Listeners[].DefaultActions[].TargetGroupArn" --output text)
      #             currentServiceInfo=$(aws ecs describe-services --cluster DevSandboxSampleCluster --services DevSandBoxSampleService8080 DevSandBoxSampleService8080-2 --query "services[?(length(deployments)==\`1\` && runningCount==desiredCount && desiredCount!=\`0\` && length(loadBalancers[?targetGroupArn==\`${mainListenertargetArn}\`])==\`1\`)].[serviceName,desiredCount]" --output text)
      #             currentService=$(echo ${currentServiceInfo} | cut -d ' ' -f1)
      #             desiredCapacity=$(echo ${currentServiceInfo} | cut -d ' ' -f2)
      #             nextTargetService=$(aws ecs describe-services --cluster DevSandboxSampleCluster --services DevSandBoxSampleService8080 DevSandBoxSampleService8080-2 --query "services[?(length(deployments)==\`1\` && runningCount==desiredCount && desiredCount==\`0\` && length(loadBalancers[?targetGroupArn==\`${testListenertargetArn}\`])==\`1\`)].serviceName" --output text)
      #             echo "export MAIN_LISTENER_ARN='${mainListener}'" >> "$BASH_ENV"
      #             echo "export TEST_LISTENER_ARN='${testListener}'" >> "$BASH_ENV"
      #             echo "export MAIN_LISTENER_TARGET_ARN='${mainListenertargetArn}'" >> "$BASH_ENV"
      #             echo "export TEST_LISTENER_TARGET_ARN='${testListenertargetArn}'" >> "$BASH_ENV"
      #             echo "export CURRENT_SERVICE_NAME='${nextTargetService}'" >> "$BASH_ENV"
      #             echo "export NEXT_SERVICE_NAME='${nextTargetService}'" >> "$BASH_ENV"
      #             echo "export DESIRED_CAPACITY='${desiredCapacity}'" >> "$BASH_ENV"
      #       - run:
      #         command: aws ecs update-service --cluster DevSandboxSampleCluster --service ${CURRENT_SERVICE_NAME} --desired-count ${DESIRED_CAPACITY}
      #     service-name: ${NEXT_SERVICE_NAME}
      #     cluster-name: "DevSandboxSampleCluster"
      #     family: "deploy-nginx"
      #     container-image-name-updates: "container=ecs-deploy-test-nginx,tag=${CIRCLE_SHA1}"
      #     verify-revision-is-deployed: true
      #     filters:
      #       branches:
      #         only:
      #           - circleci-plan4
      #     post-steps:
      #       - run:
      #           command: |
      #             aws elbv2 modify-listener --listener-arn ${MAIN_LISTENER_ARN} --default-actions Type=forward,TargetGroupArn=${TEST_LISTENER_TARGET_ARN}
      #             aws elbv2 modify-listener --listener-arn ${TEST_LISTENER_ARN} --default-actions Type=forward,TargetGroupArn=${MAIN_LISTENER_TARGET_ARN}
      #       - run:
      #           command: |
      #             aws ecs update-service --cluster DevSandboxSampleCluster --service ${CURRENT_SERVICE_NAME} --desired-count 0
      #             aws ecs wait services-stable --cluster DevSandboxSampleCluster --services ${CURRENT_SERVICE_NAME}
